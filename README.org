* ggplotnim - ggplot2 in Nim
[[https://travis-ci.org/Vindaar/ggplotnim.svg?branch=master]]

This package, as the name suggests, will become a "sort of" port of
[[https://ggplot2.tidyverse.org/][ggplot2]] for Nim. 

It is based on the [[https://github.com/vindaar/ginger/][ginger]] package. 

If you're unfamiliar with the Grammar of Graphics to create plots, one
of the best resources is probably Hadley Wickham's book on =ggplot2=,
for which also an online version exists at:
https://ggplot2-book.org/

In general this library tries (and will continue to do so) to stay
mostly compliant with the =ggplot2= syntax. So searching for a
solution in =ggplot2= should hopefully be applicable to this (unless
the feature isn't implemented yet of course).

** Recipes

For a more nimish approach, check out the [[file:recipes.org][recipes]], which should give
you examples for typical use cases and things I encountered and the
solutions I found. Please feel free to add examples to this file to
help other people!

Note that all recipes shown there are part of the test suite. So it's
guaranteed that the plots shown there for a given version actually
produce the shown result!

** Documentation

The documentation is found at:

https://vindaar.github.io/ggplotnim

** Installation & dependencies

Installation should be just a 
#+BEGIN_SRC sh
nimble install ggplotnim
#+END_SRC
away. Maybe consider installing the =#head=, since new version
probably won't be released after every change, due to rapid
development still ongoing.

Since this library is written from scratch there is only a single
external dependency, which is =cairo=. 

** Currently working features

Geoms:
- =geom_point=
- =geom_line=
- =geom_histogram=
- =geom_freqpoly=
- =geom_bar= 
- =geom_errorbar=
- =geom_linerange=
- =geom_tile=
- =geom_text=
- *soon:*
  - =geom_density=
  - and possibly =geom_ridgeline=

Facets:
- =facet_wrap=

Scales:
- size (both for discrete and continuous data)
- color (both for discrete and continuous data)
Shape as a scale is not properly implemented, simply because ginger
only provides 2 (circle, cross) different marker shapes so far. Feel free to
[[https://github.com/Vindaar/ginger/blob/master/src/ginger.nim#L2267-L2292][add more]]!

** Data frame

The library implements a naive dynamic and column based data
frame. Each column is represented as a [[https://github.com/PMunch/nim-persistent-vector][persistent vector]] of
=Values=. A =Value= is a variant object, similar to a =JsonNode= of
the standard library. 

*NOTE*: Due to the dynamic nature and naive implementations
performance is not a priority. Heavy calculations should be done
before creation of the data frame. Simple arithmetic, filtering, reducing
etc. is the main aim. 

The data frame provides the "5 verbs" of [[https://dplyr.tidyverse.org/][dplyr]] and more. Main implemented functions:
- =filter=
- =mutate=, =transmute=
- =select=, =rename=
- =arrange=
- =summarize=
- =group_by=
- =arrange=
- =inner_join=
- =set_diff=
- =count=
- =bind_rows=
- =gather=
- =unique=,
which are all based on the =FormulaNode=
object. Basically they all receive =varargs[FormulaNode]=, which is
evaluated in context of the given dataframe.
Other convenience procs 

Creationg of a =FormulaNode= can be done either directly via untyped
templates acting on =+=, =-=, =*=, =/=, =~=. Using the =mpg= data set
as an example:
#+BEGIN_SRC nim
let f = displ ~ hwy / cty
#+END_SRC
would describe the dependence of the displacement (=displ=) of the
ratio of the highway to the freeway mpg. 
Echoeing this formula prints it as a lisp like tree:
#+BEGIN_SRC 
(~ displ (/ hwy cty))
#+END_SRC
Note that the =~= in the untyped templates always acts as the root
node of the resulting tree. The LHS of it is always considered the
dependend quantity.
In these templates however, the identifiers are converted to strings
and must match the names in the data frame!

*** =f{}= macro to create formulas
The second way to create a =FormulaNode= is via the =f{}= macro. This
provides a little more flexibility:
#+BEGIN_SRC nim
let f = f{ "displ" ~ "hwy" / mean("cty") }
#+END_SRC
Note that here all keys *must* be explicit strings. Everything that is
*not* a string, will be interepreted in the calling scope. 

If the identifier is the first element of a =nnkCall=, e.g. as in
=mean("cty")=, it will be stored in a =FormulaNode= of kind
=fkFunction=. An =fkFunction= itself may contain two different kinds
of functions, as evident by the implementation:
#+BEGIN_SRC nim
# storing a function to be applied to the data
fnName: string
arg: FormulaNode
case fnKind*: FuncKind
of funcVector:
  fnV: proc(s: PersistentVector[Value]): Value
  res: Option[Value] # the result of fn(arg), so that we can cache it
                     # instead of recalculating it for every index potentially
of funcScalar:
  fnS: proc(s: Value): Value
#+END_SRC
We store the name of the function as a string for debugging and
echoeing. The function must only take a single argument (this may be
changed in the future / we may wrap a function with multiple arguments
in a template in the future). It can either be a procedure taking a
vector of =Values= corresponding to a proc working on a whole column
as the input (e.g. =mean=) or a scalar function taking a single
=Value= (e.g. =abs=). In the latter case the function is applied to
each index of the key of the data frame given by =arg=.

Lifting templates are provided to lift any:
- =liftVector[T]Proc=: =proc (s: seq[T]): T= proc to =proc(s:
  PersistentVector[Value]): Value=
- =liftScalar[T]Proc=: =proc (s: T): T= proc to =proc(s: Value): Value=
where =T= may be =float, int, string=.

The =PersistentVector= is an implementation detail of the data frame
at the moment and may be changed back to =seq= soon.

On the other hand if an identifier is not part of a =nnkCall= it is
interpreted as a variable declared in the calling scope and will be
converted to a =Value= using =%= and stored as a =fkVariable=. 

Literal interger and float values are also allowed.

Each formula can be evaluated using =evaluate= and =reduce=. The
available procs have the following signature
#+BEGIN_SRC nim
# for formulas independent of DFs, e.g. `evaluate f{1 + 2} == %~ 3`
proc evaluate*(node: FormulaNode): Value 
# evaluate formula at row index `idx`. Possible calculation of a whole row
proc evaluate*(node: FormulaNode, data: DataFrame, idx: int): Value 
# reduce a DF to a single `Value` based on a formula `reduce(f{mean("someCol")}, df)`
proc reduce*(node: FormulaNode, data: DataFrame): Value 
# create new DF column based on formula and DF
proc evaluate*(node: FormulaNode, data: DataFrame): PersistentVector[Value]
#+END_SRC

**** DF examples

Using a lifted vector valued function and local variables as keys and
integer values:
#+BEGIN_SRC nim
let val = 1000
let key = "cty"
let f = f{"cty_norm" ~ "cty" / mean(key) * val}
#+END_SRC

Using a lifted scalar valued function and local variables as keys and
float literal values for a random calculation:
#+BEGIN_SRC nim
let g = f{"cty_by_2ln_hwy" ~ "cty" / (ln("hwy") * 2)}
#+END_SRC

** Examples

The following are just the first plots I reproduced. The =mpg= dataset
being used has to be read via the =readCsv= proc and be converted to a
dataframe via =toDf=. The file is located in [[file:data/mpg.csv]] part of
the repository. So the header of all examples below is simply:
#+BEGIN_SRC nim
import ggplotnim

let mpg = toDf(readCsv("data/mpg.csv"))
#+END_SRC
where it is assumed the current working directory is the =ggplotnim=
dir.

*Consider looking at the [[file:recipes.org][recipes]] in addition to the below to get a
fuller picture!*

*** Scatter of displ ~ hwy

Simple scatter plot of two quantities ="displ"= vs. ="hwy"= of a
dataframe. 
#+BEGIN_SRC nim
ggplot(mpg, aes(x = "displ", y = "hwy")) +
  geom_point() + 
  ggsave("scatter.pdf")
#+END_SRC
Note: if the =ggsave= call is omitted, the return value will be a
=GgPlot= object, which can either be inspected or modified or called
upon with =ggsave= at a later time.

[[file:media/scatter.png]]

*** Scatter of displ ~ hwy, class as color scale

Same scatter plot as above, but with a grouping by a third quantity
="class"= encoded in the dot color. Also adds a title to the plot.
#+BEGIN_SRC nim
ggplot(mpg, aes(x = "displ", y = "cty", color = "class")) +
  geom_point() +
  ggtitle("ggplotnim - or I Suck At Naming Thingsâ„¢") +
  ggsave("scatterColor.pdf")
#+END_SRC

[[file:media/scatterColor.png]]


*** Filtering data frame before plotting

We may now also perform some operations on the data frame, before we
plot it. For instance we can filter on a string (or a number) and
perform calculations on columns:
#+BEGIN_SRC nim
df.filter(f{"class" == "suv"}) # comparison via `f{}` macro
  .mutate(ratioHwyToCity ~ hwy / cty # raw untyped template function definition
  ) # <- note that we have to use normal UFCS to hand to `ggplot`!
  .ggplot(aes(x = "ratioHwyToCity", y = "displ", color = "class")) + 
  geom_point() +
  ggsave("scatterFromDf.pdf")
#+END_SRC

/And eeehm, I guess the legend is broken if we only have a single entry.../

[[file:media/scatterFromDF.png]]

*** Mutating via local procedure

In addition we can use locally defined procedures in the =f{}= macro
as well (see above for caveats). For instance we can normalize a
column by dividing by the mean:
#+BEGIN_SRC nim
df.mutate(f{"cty_norm" ~ "cty" / mean("cty")}) # divide cty by mean
  .ggplot(aes(x = "displ", y = "cty_norm", color = "class")) +
  geom_point() +
  ggsave("classVsNormCty.pdf")
#+END_SRC
Note that calculations involving explicit numbers or constants is not
supported yet. For that the implementation of =FormulaNode= must be
changed to use =Value= as well.

[[file:media/classVsNormCty.png]]

*** Histogram of hwy

A simple histogram of one quantity ="hwy"= of a dataframe.
#+BEGIN_SRC nim
ggplot(mpg, aes("hwy")) +
  geom_histogram() +
  ggsave("simpleHisto.pdf")
#+END_SRC

[[file:media/simpleHisto.png]]

*** Frequency line plot
Same as the histogram above, but as a frequence line.
#+BEGIN_SRC nim
ggplot(mpg, aes("hwy")) +
  geom_freqpoly() +
  ggsave("freqpoly.pdf")
#+END_SRC

[[file:media/freqpoly.png]]

*** Combining several geoms, setting aesthetics of specific geoms

A combination of a histogram and a frequency line plot. Also showcases
the ability to set aesthetics of specific geoms to a constant value
(in this case change line width and color of the =freqpoly=
line). Note that the arguments for style settings take =Option[T]=!
Note that the order in which the =geom_*= functions are called is also
the order in which they are drawn.
#+BEGIN_SRC nim
ggplot(mpg, aes("hwy")) +
  geom_histogram() +
  geom_freqpoly(color = some(parseHex("FD971F")),
                size = some(3.0)) +
  ggsave("histoPlusFreqpoly.pdf")
#+END_SRC

[[file:media/histoPlusFreqpoly.png]]

*** Facet wrap of manufacturer

Although still somewhat ugly, because the scaling is off, facet
wrapping is working in principle:
#+BEGIN_SRC nim
ggplot(mpg, aes("displ", "hwy")) +
  geom_point(aes(color = "manufacturer")) +
  facet_wrap(~ class) +
  ggsave("facet_wrap_manufacturer.pdf")
#+END_SRC

[[file:media/facet_wrap_manufacturer.png]]

*** Simple bar plot

A simple bar plot of a variable with discrete data (typically a column
of strings, bools or a small subset of ints).
#+BEGIN_SRC nim
ggplot(mpg, aes(x = "class")) +
  geom_bar() +
  ggsave("bar_example.pdf")
#+END_SRC

[[file:media/bar_example.png]]

** *Experimental* Vega-Lite backend

From the beginning one of my goals for this library was to provide not
only a Cairo backend, but also to support [[https://vega.github.io/vega-lite/][Vega-Lite]] (or possibly Vega)
as a backend. 
To share plots and data online (and possibly add support for
interactive features) is much easier in such a way.

For now only a proof of concept is implemented in
=vega_utils.nim=. That is only =geom_point= with the ="x"=, ="y"=,
="color"= scale set on the main aesthetic are supported. Generalizing
this is mostly a tediuos process, since the =GgPlot= object fields
etc. have to be mapped to the appropriate Vega-Lite JSON nodes.

A simple example:
#+BEGIN_SRC nim
let vegaJson = ggplot(mpg, aes(x = "displ", y = "cty", color = "class")) +
  geom_point() +
  ggtitle("ggplotnim - or I Suck At Naming Things") +
  ggvega()
show(vegaJson)
#+END_SRC
creates the equivalent plot from above using Vega-Lite. Note that it
still uses the Vega-Lite default theming.

It generates the following Vega-Lite JSON:
#+BEGIN_SRC 
{
  "$schema": "https://vega.github.io/schema/vega-lite/v4.json",
  "description" : "Vega-lite plot created by ggplotnim",
  "width" : 640,
  "height" : 480,
  "title": "ggplotnim - or I Suck At Naming Things",
  "data": {"values" : [{"displ": 1.8, "cty": 18.0, "class": "compact"},
                       {"displ": 1.8, "cty": 21.0, "class": "compact"},
                       {"displ": 2.0, "cty": 20.0, "class": "compact"},
                       ... ]
]},
  "mark": "point",
  "encoding": {
    "x": {"field": "displ", "type": "quantitative"},
    "y": {"field": "cty", "type": "quantitative"},
    "color": {"field": "class", "type": "nominal"}
   }
}
#+END_SRC

And results in the following Vega-Lite plot:

[[file:media/vega_backend_example.png]]

Or if you want to look at the interactive version in your browser, see
here:

[[https://vega.github.io/editor/#/url/vega-lite/N4KABGBEAkDODGALApgWwIaQFxUQFzwAdYsB6UgN2QHN0A6agSz0QFcAjOxge1IRQyUa6ALQAbZskoAWOgCtY3AHaQANOCgATZAgBOjQnh4qckAGrDxksITHc8YeLuTo8yTWHYBPMNWq37JUZUNQ1IIzwxZGwoPwC8INQwETBuXTAASTAAZVZ4AGswAEEHADl0VEYlajAAFUQq6lhQiEgMXXyYyEJuKrwWqAB3Rk0WGIA2aQAGdVaURmp8GOkADhmw5CV4bk1GmNAIVoAPfcgAM0ZkMU0u3dhbNSg8L0Jo0wBHVnQlCNdGKkgAF9ZodIF5ThcrjdTPBno9wi83lBPt9fkYAcCNK1tnZdBDLtcuvAxOhYM1VE9EV0lNxKkp0GIgRpMa1NK5MDgDqCKAzWDoYgBtLGHYCQO4PHAARjoKwpkFh4KlsqgxNJzRhtMI6FhQJBhzAovFjKlMrlCpiACZJWaSWSiZrtf0WfqDWLGPdjWALWa4TgLTMVbb1SqHTrnfrDe6JV6fYqvdbA2r7agtWG9SK3R7LaaVb6wJLxjakxqU47dcKIJGs36c-K85LlfKg8nU0705XM9GAMx0BN1uMNot2kut8su11GmLSxvmpVD4Py0NtisTqOe6exqeFxPDkOltMrqvR725uP++ctsvhjOTv2bqUATgvI6v7dX1a9tdn+YArM+96O14dren4zvWADs-6Lvuy7jkeno9n236SpBO4LtsMFji68ExIh96-lBGGAW+OE1mBA5-mhXSVJosCMAAXtEQHvt2vb4ShUE0XRjFYRGnaerIJ79lunEjNxTEkfxMQ-nQXbsdIUGwKwFC8Tea7SbJ7FIc2phKSpzGkWAMlyaeU4KVRunKapwHqTgMmocJUomU2xZQHp1ksZ626OfmQmqrukDuQZUl2XQDnId5-kLhasAuG4eLBSB9nsZRLkBTFcXIAlkkgeMdB+fWkU6VAGWuFlHmGXlBUUVBpXxRVIVgOF9apVFXR1eViW2UZmmmVK5lpQuQU5d1xlaYpVldR+yV9fm2muYFk0jR+eWtfWA1tZZ+nLcedAbfWT4WVAXEMRJh6NRae34RafnFW0YmnQ1IF4bNg5HfdtGPVNrFrQOM53SdPHfQhdCRRBomfUDO2epd+1-aJQQ8iowO4ex4UA1U-zfE93U9s5EUI1jyPQ7hvU+QWhNIzjH542jlPYyjOC0696MLXSRPU6x+P1vNAXs1TjNgD25FTq1GOIwzJNM1+LX08T53PTLA5FWzmMC1LYBwyJ7385LCu42FKVQYQjAFKwhCcyDzUDhtd0m2bFuCz2h3k-jdum-k5uW6TLvIbbC3257jsa7I1tmcbHte4LofyRHDvezgMezb77vx4LMnVVOvMLoHUcaxn43vbnwf6zTdC+-WbsLcNpfRknrsTdttcCYbyeNwnmutw37013BjUF692ddL32H913yFVwFI98Ul5eF4Nw9Lc3yzj-Wt0B5HJd9yB9ffinG9pyHq8DpPOebx3u+V3HQcX8fU7rwFxe32HOD74-5-p-l8+bVAT+f5nUoh6mD-vnO+Tlr552XqFCuA4gG-w-kfMGsD26fy1oAlBoC0G+QwVAzWsce5L23t1LBkoxbV0IaPHe+CF5bQvuxU+i8m5EI-LIJBU4GG0PTvQnBzC65f1ev7d+h9cGCWoT-boCCRGg24UXSRvCW5sPAbI4R8iV6KPzBw+BKjKGjSuoPCBW8dHTT0d3GhWib5OyVlOf65D2BEVfLg4W7EbFTw4PYg8qjE50wIXYpcdDXoq1cb4zC0dpGvTIUE9xsEjF8PUaQiawTiJSLiREoabi-GhJSQkqJHcZIkMEWkxJDjPH5jCT5C0LjCk5MFtKdRFoCmLyKR4mJ64ynfgtKkxp1SNa1OupoxaTTokz26r02a9TskZJ6VYv0gSqmTNwRuMZnTLKDI7os8pDSVndNwQA+MEyQka1hs4iG4kO5HNepU6iD0oY7JMe0uBH1TmC3OeUh5gMzolMur9axJyvqHLoN8ucOtrkfJaaTbmA434LneWc9iUKunzM+XC-ZSSkVjIDGYgZ2y0XlIxeIpSqznlgPzKzSJiKwU1hfvmWZCKDm3KpRxHx2KKVC28Zi6eaky4MuWW5ChwyWFGwIUwlll8bY8JFcS+FnCj4Ms2by4V-LowzVMfivlnLox5SQjzcViqBLfzuhymyLD+HkwfmkhV6qW4kLNYw2+cSHmGs8hpEhDq1VGqVXc7VQrcmeoHDa6VIixEGrdU6rxr1+mOsMqwmR7KQ2GUBRonVlrsxYKtIRcluqU3IvesyzNNYE0Wn6TColBai0go7j2BNkopXHXLZYqtNbHl-Mccc4FkNQV5tZa9RtxaNaVuzZi3tjiyZ+yTe6kGELRZjtDXggR0741tLXvOxqL1yaXNMEOkpTiAm-JuVu6ZJLd0duTdLEWQLB11tAZOqUNKN2XtuVW9d8qzkAtbbGi147swFrxcGj9M6vkDtVX+wyAH0XLpAqBtd4HuqXV2WmplGaT2fl2dWlFxSWWQeQo2gluakOYYOmh5pnb8Nnh-QtXDn783XTIwFCj-7X3dvTXSz5DHcVMdRRh4l8TvVEoZbe59liSE8sWsBldvqp08ZDuxfjInn5BvIaJiDJr7lHpfXBt596WOpo0+2l92nVNOzfeIzdLLr35ifU2vdpnWNYYM-89T7H0PEeU3meDmK6MgfE36B5HmLpea9P6gCTmkNmbeu5xDlGu1QZzRFmdzNovheYyy9Z7S5XQQ452lLrm0u+ZAlls8MncsjIPRUxzRGkP5ctIV2LUauOusU7ohlEa41+e5QYl9fH2u8bZeIkBw6hNdb7f57jmK+slIG8oixUmd2TcgTilTMWkvEcA3dIrH4HOLYy3h66gX0vBci5dM9h7Nv7ZndKGBuF+lrePNdHzNWLorfI-diDO2ytDO22Mu7S28M2dc19rbB3ftnn+6dzzR2KYnfK4D8HpL0LPeKxdpmwmcPw4-Od662H0nfYO7dwj72ceMYQ9j+j368cvtJ0TgHZ2Ss6aeVM8HFmTPLcJxe3Tzzcdtrp7c8HMmmc-YZ3Z4dcTYdXLZ8KAAusyEEi4lAXGoPsQEIBARAA][Open in vega browser]]

** Known issues / limitations

- facet wrap layout is quite ugly still
- ...


